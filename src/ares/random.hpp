// Copyright (C) 2002-2007 Daniel Cowgill
//
// Usage of the works is permitted provided that this instrument is retained
// with the works, so that any entity that uses the works is notified of this
// instrument.
//
// DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.

#ifndef included_ares_random
#define included_ares_random

namespace ares {

// A collection of simple pseudorandom number generation functions. The
// numbers generated by these functions are _not_ suitable for use in
// cryptographic applications or in programs where unpredictability is
// important.
struct Random {
    // Seeds the random number generator. If n is less than or equal to zero,
    // zero is used instead.
    static void seed(int n);

    // Returns the next boolean value in the current sequence of pseudorandom
    // numbers.
    static bool next_bool();

    // Returns the next integer value in the current sequence of pseudorandom
    // numbers. The returned value will be between 0 and n, excluding n.
    static int next_int(int n)
    {
        return int(next_double(n));
    }

    // Returns the next double-precision floating-point value in the current
    // sequence of pseudorandom numbers. The returned value will be between 0
    // and n, excluding n.
    static double next_double(double n);

    // Returns the next integer value in the current sequence of pseudorandom
    // numbers, scaled so that it is between low and high, inclusive.
    static int value_in_range(int low, int high)
    {
        return low + next_int(high - low + 1);
    }
};

} // namespace ares

#endif
